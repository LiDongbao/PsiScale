#pragma once

#include <map>
#include <memory>
#include <vector>

/**
	心理学量表一般都是让被试回答一系列的问题(question), 在回答问题时，用户从多个选择中做出自己
	的选择(choice)，然后根据用户对所有问题的选择，评定用户的若干个心理特质（子量表，group)的得分.

	传统意义上的是非题，可以视作是yes/no两个选项的选择题。

	为了能够根据被试的回答评定每个子量表的得分，需要预先根据量表的打分规则设定分数矩阵。分数矩阵
	定义了用户对于任意一个问题所做的任意一个选择，对任意一个子量表的得分的贡献。采用分数矩阵的方
	法，既可以对单选题的结果进行处理，也可以对多选题的结果进行处理。

	每份量表都有自己的分数矩阵，分数矩阵文件的格式如下（以量表"24.基本共情量表BES"为例)：

	第一行： 题目数  每题的选择数 子量表个数

	20 5 2 // 表示20题，每题5个选择，一共有两个子量表。

	第二行： \t\t 子量表1名称 \t 子量表2名称 ...
	
	\t\t 情感共情 \t 认知共情 // 两个子量表的名称

	第三行起：题号 选择号 子量表编号 在该题中选择了该选择，则该子量表的得分

	1	1	5	0	// 第1题如果选择1，则第1个子量表（情感共情）加分5， 第2个子量表（认知共情）加分0
	1	2	4	0	// 第1题如果选择2，则第1个子量表（情感共情）加分4， 第2个子量表（认知共情）加分0
	1	3	3	0	// 第1题如果选择3，则第1个子量表（情感共情）加分3， 第2个子量表（认知共情）加分0
	1	4	2	0	// 第1题如果选择4，则第1个子量表（情感共情）加分2， 第2个子量表（认知共情）加分0
	1	5	1	0	// 第1题如果选择5，则第1个子量表（情感共情）加分1， 第2个子量表（认知共情）加分0
	2	1	1	0	// 第2题如果选择1，则第1个子量表（情感共情）加分1， 第2个子量表（认知共情）加分0
	2	2	2	0	// 第2题如果选择2，则第1个子量表（情感共情）加分2， 第2个子量表（认知共情）加分0
	2	3	3	0	// 第2题如果选择3，则第1个子量表（情感共情）加分3， 第2个子量表（认知共情）加分0
	2	4	4	0	// 第2题如果选择4，则第1个子量表（情感共情）加分4， 第2个子量表（认知共情）加分0
	2	5	5	0	// 第2题如果选择5，则第1个子量表（情感共情）加分5， 第2个子量表（认知共情）加分0
	3	1	0	1	// 第3题如果选择1，则第1个子量表（情感共情）加分0， 第2个子量表（认知共情）加分1
	3	2	0	2	// 第3题如果选择2，则第1个子量表（情感共情）加分0， 第2个子量表（认知共情）加分2
	3	3	0	3	// 第3题如果选择3，则第1个子量表（情感共情）加分0， 第2个子量表（认知共情）加分3
	3	4	0	4	// 第3题如果选择4，则第1个子量表（情感共情）加分0， 第2个子量表（认知共情）加分4
	3	5	0	5	// 第3题如果选择5，则第1个子量表（情感共情）加分0， 第2个子量表（认知共情）加分5
	……

	以上示例对应的情形是：
	第1题属于子量表1，正向打分；
	第2题属于子量表1，负向打分；
	第3题属于子量表2，正向打分；
	……

	分数矩阵文件缺省的后缀名为".score"。对于典型的心理量表，该分数矩阵文件可以用程序的方法自动生成。
*/
class CScoreMatrix
{
public:
	/// 从指定的文件路径加载分数矩阵文件。
	bool Load(const wchar_t * path);

	/// 获得第question个问题中选择第choice个答案后，第group个子量表的得分。
	double GetWeight(unsigned int question, unsigned int choice, unsigned int group);
	
	const std::vector<CString>& GetGroups() const;
protected:
	std::vector<std::vector<std::vector<double>>> _matrix;
	std::vector<CString> _groups;
};

/**
	
*/
class CScorer
{
public:
	CScorer();
	~CScorer();
	bool Init(const wchar_t * score_folder);
	CScoreMatrix * GetScoreMatrix(const wchar_t * scale_name);
private:
	bool _initialized;
	
	std::map<CString, std::shared_ptr<CScoreMatrix>> _all_score_matrix;
};

